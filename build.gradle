buildscript {
    ext {
        kotlinVersion = '1.2.71'
        springBootVersion = '2.2.0.BUILD-SNAPSHOT'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath 'nu.studer:gradle-jooq-plugin:3.0.2'
        classpath 'org.jooq:jooq-codegen:3.11.9'
        classpath group: 'mysql', name: 'mysql-connector-java', version: '8.0.13'
    }
}

plugins {
    id 'nu.studer.jooq' version '3.0.2'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

bootJar {
    mainClassName = "pl.english.teacher.SpringBootMain"
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
//    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')
//    testImplementation('org.springframework.security:spring-security-test')
//    compile group: 'org.springframework', name: 'spring-context', version: '5.1.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-jdbc', version: '5.1.4.RELEASE'
    runtime group: 'mysql', name: 'mysql-connector-java', version: '8.0.13'

    compile 'com.google.guava:guava:23.0'
    compile 'org.jsoup:jsoup:1.10.3'
    compile("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")

    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // jooq
    compile 'org.jooq:jooq:3.11.9'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.3.0'


}

task generateDbClasses {
// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
        jdbc() {
            driver('com.mysql.cj.jdbc.Driver')
            url('jdbc:mysql://localhost:3306/english_teacher')
            user('root')
            password('')
        }
        generator() {
            database() {
            }

            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - https://github.com/jOOQ/jOOQ/issues/4797
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {
                pojos true
                daos true
            }
            target() {
                packageName('pl.english.teacher.generated')
                directory('src/main/java')
            }
        }
    }

// Run the code generator
// ----------------------
    org.jooq.codegen.GenerationTool.generate(writer.toString())
}
